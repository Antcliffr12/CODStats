{"ast":null,"code":"import axios from 'axios';\nimport uniqid from 'uniqid';\nimport rateLimit from 'axios-rate-limit';\nimport crypto from 'crypto';\nconst userAgent = \"b8cf328b-664a-463b-9566-7c5cf966e4e9\";\nlet baseCookie = \"new_SiteId=cod; ACT_SSO_LOCALE=en_US;country=US;XSRF-TOKEN=68e8b62e-1d9d-4ce1-b93f-cbe5ff31a041;API_CSRF_TOKEN=68e8b62e-1d9d-4ce1-b93f-cbe5ff31a041;\";\nlet ssoCookie;\nlet loggedIn = false;\nlet debug = 0;\nlet defaultPlatform;\n\nlet _helpers;\n\nlet apiAxios = axios.create({\n  headers: {\n    common: {\n      \"content-type\": \"application/json\",\n      \"Cookie\": baseCookie,\n      \"userAgent\": userAgent,\n      \"x-requested-with\": userAgent,\n      \"Accept\": \"application/json, text/javascript, */*; q=0.01\",\n      \"Connection\": \"keep-alive\"\n    }\n  }\n});\nlet loginAxios = apiAxios;\nlet defaultBaseURL = \"https://my.callofduty.com/api/papi-client/\";\nlet loginURL = \"https://profile.callofduty.com/cod/mapp/\";\nlet defaultProfileURL = \"https://profile.callofduty.com/\";\nconst modernwarfare = \"mw\";\nlet platforms = {\n  battle: \"battle\",\n  steam: \"steam\",\n  psn: \"psn\",\n  xbl: \"xbl\",\n  acti: \"uno\",\n  uno: \"uno\"\n};\n\nclass helpers {\n  buildUri(str) {\n    return `${defaultBaseURL}${str}`;\n  }\n\n  buildProfileUri(str) {\n    return `${defaultProfileURL}${str}`;\n  }\n\n  cleanClientName(gamertag) {\n    return encodeURIComponent(gamertag);\n  }\n\n  sendRequestUserInfoOnly(url) {\n    return new Promise((resolve, reject) => {\n      if (!loggedIn) reject(\"Not Logged In.\");\n      apiAxios.get(url).then(body => {\n        if (debug === 1) {\n          console.log(`[DEBUG]`, `Build URI: ${url}`);\n          console.log(`[DEBUG]`, `Round trip took: ${body.headers['request-duration']}ms.`);\n          console.log(`[DEBUG]`, `Response Size: ${JSON.stringify(body.data).length} bytes.`);\n        }\n\n        resolve(JSON.parse(body.data.replace(/^userInfo\\(/, \"\").replace(/\\);$/, \"\")));\n      }).catch(err => reject(err));\n    });\n  }\n\n  sendRequest(url) {\n    return new Promise((resolve, reject) => {\n      if (!loggedIn) reject(\"Not Logged In.\");\n      apiAxios.get(url).then(body => {\n        if (debug === 1) {\n          console.log(`[DEBUG]`, `Build URI: ${url}`);\n          console.log(`[DEBUG]`, `Round trip took: ${body.headers['request-duration']}ms.`);\n          console.log(`[DEBUG]`, `Response Size: ${JSON.stringify(body.data.data).length} bytes.`);\n        }\n\n        if (typeof body.data.data.message !== \"undefined\" && body.data.data.message.includes(\"Not permitted\")) if (body.data.data.message.includes(\"user not found\")) reject(\"user not found.\");else if (body.data.data.message.includes(\"rate limit exceeded\")) reject(\"Rate Limited.\");else reject(body.data.data.message);\n        resolve(body.data.data);\n      }).catch(err => reject(err));\n    });\n  }\n\n  postReq(url, data, headers = null) {\n    return new Promise((resolve, reject) => {\n      loginAxios.post(url, data, headers).then(response => {\n        response = response.data;\n        resolve(response);\n      }).catch(err => {\n        reject(err.message);\n      });\n    });\n  }\n\n}\n\nclass api {\n  constructor(platform = \"psn\", _debug = 0, ratelimit = {}) {\n    defaultPlatform = platform;\n\n    if (_debug === 1) {\n      debug = 1;\n      apiAxios.interceptors.request.use(resp => {\n        resp.headers['request-startTime'] = process.hrtime();\n        return resp;\n      });\n      apiAxios.interceptors.response.use(response => {\n        const start = response.config.headers['request-startTime'];\n        const end = process.hrtime(start);\n        const milliseconds = Math.round(end[0] * 1000 + end[1] / 1000000);\n        response.headers['request-duration'] = milliseconds;\n        return response;\n      });\n    }\n\n    try {\n      apiAxios = rateLimit(apiAxios, ratelimit);\n    } catch (Err) {\n      console.log(\"Could not parse ratelimit object. ignoring.\");\n    }\n\n    _helpers = new helpers();\n  }\n\n  login(email, password) {\n    return new Promise((resolve, reject) => {\n      let randomId = uniqid();\n      let md5sum = crypto.createHash('md5');\n      let deviceId = md5sum.update(randomId).digest('hex');\n\n      _helpers.postReq(`${loginURL}registerDevice`, {\n        'deviceId': deviceId\n      }).then(response => {\n        let authHeader = response.data.authHeader;\n        apiAxios.defaults.headers.common.Authorization = `bearer ${authHeader}`;\n        apiAxios.defaults.headers.common.x_cod_device_id = `${deviceId}`;\n\n        _helpers.postReq(`${loginURL}login`, {\n          \"email\": email,\n          \"password\": password\n        }).then(data => {\n          if (!data.success) throw Error(\"Unsuccessful login.\");\n          ssoCookie = data.s_ACT_SSO_COOKIE;\n          apiAxios.defaults.headers.common.Cookie = `${baseCookie}rtkn=${data.rtkn};ACT_SSO_COOKIE=${data.s_ACT_SSO_COOKIE};atkn=${data.atkn};`;\n          loggedIn = true;\n          resolve(\"Successful Login.\");\n        }).catch(err => {\n          reject(err.message);\n        });\n      }).catch(err => {\n        reject(err.message);\n      });\n    });\n  }\n\n  MWleaderboard(page, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n\n      let urlInput = _helpers.buildUri(`leaderboards/v2/title/mw/platform/${platform}/time/alltime/type/core/mode/career/page/${page}`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWcombatmp(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/mp/start/0/end/0/details`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWcombatmpdate(gamertag, start = 0, end = 0, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/mp/start/${start}/end/${end}/details`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWcombatwz(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/wz/start/0/end/0/details`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWcombatwzdate(gamertag, start = 0, end = 0, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/wz/start/${start}/end/${end}/details`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWfullcombatmp(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/mp/start/0/end/0`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWfullcombatmpdate(gamertag, start = 0, end = 0, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/mp/start/${start}/end/${end}`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWfullcombatwz(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/wz/start/0/end/0`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWfullcombatwzdate(gamertag, start = 0, end = 0, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/wz/start/${start}/end/${end}`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWmp(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform == \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`stats/cod/v1/title/mw/platform/${platform}/gamer/${gamertag}/profile/type/mp`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWwz(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform == \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`stats/cod/v1/title/mw/platform/${platform}/gamer/${gamertag}/profile/type/wz`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWBattleData(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      let brDetails = {};\n      this.MWmp(gamertag, platform).then(data => {\n        let lifetime = data.lifetime;\n\n        if (typeof lifetime !== \"undefined\") {\n          let filtered = Object.keys(lifetime.mode).filter(x => x.startsWith(\"br\")).reduce((obj, key) => {\n            obj[key] = lifetime.mode[key];\n            return obj;\n          }, {});\n\n          if (typeof filtered.br !== \"undefined\") {\n            filtered.br.properties.title = \"br\";\n            brDetails.br = filtered.br.properties;\n          }\n\n          if (typeof filtered.br_dmz !== \"undefined\") {\n            filtered.br_dmz.properties.title = \"br_dmz\";\n            brDetails.br_dmz = filtered.br_dmz.properties;\n          }\n\n          if (typeof filtered.br_all !== \"undefined\") {\n            filtered.br_all.properties.title = \"br_all\";\n            brDetails.br_all = filtered.br_all.properties;\n          }\n        }\n\n        resolve(brDetails);\n      }).catch(e => reject(e));\n    });\n  }\n\n  MWfriends(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\") reject(`Battlenet friends are not supported. Try a different platform.`);\n      if (platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n      console.log(\"Will only work for the account you are logged in as\");\n\n      let urlInput = _helpers.buildUri(`stats/cod/v1/title/mw/platform/${platform}/gamer/${gamertag}/profile/friends/type/mp`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWstats(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`stats/cod/v1/title/mw/platform/${platform}/gamer/${gamertag}/profile/type/mp`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWwzstats(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`stats/cod/v1/title/mw/platform/${platform}/gamer/${gamertag}/profile/type/wz`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWweeklystats(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      weeklyStats = [];\n      weeklyStats.wz = {};\n      weeklyStats.mp = {};\n      this.MWstats(gamertag, platform).then(data => {\n        if (typeof data.weekly !== \"undefined\") weeklyStats.mp = data.weekly;\n        this.MWwzstats(gamertag, platform).then(data => {\n          if (typeof data.weekly !== \"undefined\") weeklyStats.wz = data.weekly;\n          resolve(weeklyStats);\n        }).catch(e => reject(e));\n      }).catch(e => reject(e));\n    });\n  }\n\n  MWloot(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform == \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`loot/title/mw/platform/${platform}/gamer/${gamertag}/status/en`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWAnalysis(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\n      if (platform === \"battle\" || platform == \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`ce/v2/title/mw/platform/${platform}/gametype/all/gamer/${gamertag}/summary/match_analysis/contentType/full/end/0/matchAnalysis/mobile/en`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  MWMapList(platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      let urlInput = _helpers.buildUri(`ce/v1/title/mw/platform/${platform}/gameType/mp/communityMapData/availability`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  friendFeed(gamertag, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"battle\" || platform == \"uno\") gamertag = _helpers.cleanClientName(gamertag);\n\n      let urlInput = _helpers.buildUri(`userfeed/v1/friendFeed/platform/${platform}/gamer/${gamertag}/friendFeedEvents/en`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  getEventFeed() {\n    return new Promise((resolve, reject) => {\n      let urlInput = _helpers.buildUri(`userfeed/v1/friendFeed/rendered/en/${ssoCookie}`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  getLoggedInIdentities() {\n    return new Promise((resolve, reject) => {\n      let urlInput = _helpers.buildUri(`crm/cod/v2/identities/${ssoCookie}`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  getLoggedInUserInfo() {\n    return new Promise((resolve, reject) => {\n      let urlInput = _helpers.buildProfileUri(`cod/userInfo/${ssoCookie}`);\n\n      _helpers.sendRequestUserInfoOnly(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n  FuzzySearch(query, platform = defaultPlatform) {\n    return new Promise((resolve, reject) => {\n      if (platform === \"battle\" || platform == \"uno\" || platform == \"all\") query = _helpers.cleanClientName(query);\n\n      let urlInput = _helpers.buildUri(`crm/cod/v2/platform/${platform}/username/${query}/search`);\n\n      _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\n    });\n  }\n\n}\n\nexport { api, platforms };","map":{"version":3,"sources":["/Users/antclir/Projects/Reactjs/cod/client/node_modules/call-of-duty-api-es6/index.js"],"names":["axios","uniqid","rateLimit","crypto","userAgent","baseCookie","ssoCookie","loggedIn","debug","defaultPlatform","_helpers","apiAxios","create","headers","common","loginAxios","defaultBaseURL","loginURL","defaultProfileURL","modernwarfare","platforms","battle","steam","psn","xbl","acti","uno","helpers","buildUri","str","buildProfileUri","cleanClientName","gamertag","encodeURIComponent","sendRequestUserInfoOnly","url","Promise","resolve","reject","get","then","body","console","log","JSON","stringify","data","length","parse","replace","catch","err","sendRequest","message","includes","postReq","post","response","api","constructor","platform","_debug","ratelimit","interceptors","request","use","resp","process","hrtime","start","config","end","milliseconds","Math","round","Err","login","email","password","randomId","md5sum","createHash","deviceId","update","digest","authHeader","defaults","Authorization","x_cod_device_id","success","Error","s_ACT_SSO_COOKIE","Cookie","rtkn","atkn","MWleaderboard","page","urlInput","e","MWcombatmp","MWcombatmpdate","MWcombatwz","MWcombatwzdate","MWfullcombatmp","MWfullcombatmpdate","MWfullcombatwz","MWfullcombatwzdate","MWmp","MWwz","MWBattleData","brDetails","lifetime","filtered","Object","keys","mode","filter","x","startsWith","reduce","obj","key","br","properties","title","br_dmz","br_all","MWfriends","MWstats","MWwzstats","MWweeklystats","weeklyStats","wz","mp","weekly","MWloot","MWAnalysis","MWMapList","friendFeed","getEventFeed","getLoggedInIdentities","getLoggedInUserInfo","FuzzySearch","query"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport uniqid from 'uniqid';\r\nimport rateLimit from 'axios-rate-limit';\r\nimport crypto from 'crypto';\r\n\r\nconst userAgent = \"b8cf328b-664a-463b-9566-7c5cf966e4e9\";\r\nlet baseCookie = \"new_SiteId=cod; ACT_SSO_LOCALE=en_US;country=US;XSRF-TOKEN=68e8b62e-1d9d-4ce1-b93f-cbe5ff31a041;API_CSRF_TOKEN=68e8b62e-1d9d-4ce1-b93f-cbe5ff31a041;\";\r\nlet ssoCookie;\r\nlet loggedIn = false;\r\nlet debug = 0;\r\nlet defaultPlatform;\r\nlet _helpers;\r\n\r\nlet apiAxios = axios.create({\r\n    headers: {\r\n      common: {\r\n        \"content-type\": \"application/json\",\r\n        \"Cookie\": baseCookie,\r\n        \"userAgent\": userAgent,\r\n        \"x-requested-with\": userAgent,\r\n        \"Accept\": \"application/json, text/javascript, */*; q=0.01\",\r\n        \"Connection\": \"keep-alive\"\r\n      },\r\n    },\r\n});\r\n\r\nlet loginAxios = apiAxios;\r\n\r\nlet defaultBaseURL = \"https://my.callofduty.com/api/papi-client/\";\r\nlet loginURL = \"https://profile.callofduty.com/cod/mapp/\";\r\nlet defaultProfileURL = \"https://profile.callofduty.com/\";\r\n\r\nconst modernwarfare = \"mw\";\r\n\r\n\r\nlet platforms = {\r\n    battle: \"battle\",\r\n    steam: \"steam\", \r\n    psn: \"psn\", \r\n    xbl: \"xbl\",\r\n    acti: \"uno\",\r\n    uno: \"uno\"\r\n};\r\n\r\nclass helpers {\r\n    buildUri(str) {\r\n        return `${defaultBaseURL}${str}`;\r\n    }\r\n\r\n    buildProfileUri(str) {\r\n        return `${defaultProfileURL}${str}`;\r\n    }\r\n\r\n    cleanClientName(gamertag) {\r\n        return encodeURIComponent(gamertag);\r\n    }\r\n\r\n    sendRequestUserInfoOnly(url) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!loggedIn) reject(\"Not Logged In.\");\r\n            apiAxios.get(url).then(body => {\r\n                if (debug === 1) {\r\n                    console.log(`[DEBUG]`, `Build URI: ${url}`);\r\n                    console.log(`[DEBUG]`, `Round trip took: ${body.headers['request-duration']}ms.`);\r\n                    console.log(`[DEBUG]`, `Response Size: ${JSON.stringify(body.data).length} bytes.`);\r\n                }\r\n                resolve(JSON.parse(body.data.replace(/^userInfo\\(/, \"\").replace(/\\);$/, \"\")));\r\n            }).catch(err => reject(err));\r\n        });\r\n    }\r\n    \r\n    sendRequest(url) {\r\n        return new Promise((resolve, reject) => {\r\n            if(!loggedIn) reject(\"Not Logged In.\");\r\n            apiAxios.get(url).then(body => {\r\n                if(debug === 1) {\r\n                    console.log(`[DEBUG]`, `Build URI: ${url}`);\r\n                    console.log(`[DEBUG]`, `Round trip took: ${body.headers['request-duration']}ms.`);\r\n                    console.log(`[DEBUG]`, `Response Size: ${JSON.stringify(body.data.data).length} bytes.`);\r\n                }\r\n                if(typeof body.data.data.message !== \"undefined\" && body.data.data.message.includes(\"Not permitted\"))\r\n                    if(body.data.data.message.includes(\"user not found\")) reject(\"user not found.\");\r\n                    else if(body.data.data.message.includes(\"rate limit exceeded\")) reject(\"Rate Limited.\");\r\n                    else reject(body.data.data.message);\r\n                resolve(body.data.data); \r\n            }).catch(err => reject(err));\r\n        });\r\n    }\r\n    \r\n    postReq(url, data, headers = null) {\r\n        return new Promise((resolve, reject) => {\r\n            loginAxios.post(url, data, headers).then(response => {\r\n                response = response.data;\r\n                resolve(response);\r\n            }).catch((err) => {\r\n                reject(err.message);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nclass api {\r\n    constructor(platform = \"psn\", _debug = 0, ratelimit = {}) {\r\n        defaultPlatform = platform;\r\n        if(_debug === 1) {\r\n            debug = 1;\r\n            apiAxios.interceptors.request.use((resp) => {\r\n                resp.headers['request-startTime'] = process.hrtime();\r\n                return resp;\r\n            });\r\n            apiAxios.interceptors.response.use((response) => {\r\n                const start = response.config.headers['request-startTime'];\r\n                const end = process.hrtime(start);\r\n                const milliseconds = Math.round((end[0] * 1000) + (end[1] / 1000000));\r\n                response.headers['request-duration'] = milliseconds;\r\n                return response;\r\n            });\r\n        }\r\n        try {\r\n            apiAxios = rateLimit(apiAxios, ratelimit);\r\n        } catch(Err) { console.log(\"Could not parse ratelimit object. ignoring.\"); }   \r\n        _helpers = new helpers();      \r\n    }\r\n\r\n    \r\n\r\n    login(email, password) {\r\n        return new Promise((resolve, reject) => {\r\n            let randomId = uniqid();\r\n            let md5sum = crypto.createHash('md5');\r\n            let deviceId = md5sum.update(randomId).digest('hex');\r\n            _helpers.postReq(`${loginURL}registerDevice`, { \r\n                'deviceId': deviceId\r\n            }).then((response) => {\r\n                let authHeader = response.data.authHeader;\r\n                apiAxios.defaults.headers.common.Authorization = `bearer ${authHeader}`;\r\n                apiAxios.defaults.headers.common.x_cod_device_id = `${deviceId}`;\r\n                _helpers.postReq(`${loginURL}login`, { \"email\": email, \"password\": password }).then((data) => {\r\n                    if(!data.success) throw Error(\"Unsuccessful login.\");\r\n                    ssoCookie = data.s_ACT_SSO_COOKIE;\r\n                    apiAxios.defaults.headers.common.Cookie = `${baseCookie}rtkn=${data.rtkn};ACT_SSO_COOKIE=${data.s_ACT_SSO_COOKIE};atkn=${data.atkn};`;\r\n                    loggedIn = true;\r\n                    resolve(\"Successful Login.\");\r\n                }).catch((err) => {\r\n                    reject(err.message);\r\n                });\r\n            }).catch((err) => {\r\n                reject(err.message);\r\n            });  \r\n        });\r\n    }\r\n    \r\n     MWleaderboard(page, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            let urlInput = _helpers.buildUri(`leaderboards/v2/title/mw/platform/${platform}/time/alltime/type/core/mode/career/page/${page}`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWcombatmp (gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/mp/start/0/end/0/details`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWcombatmpdate (gamertag, start = 0, end = 0, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/mp/start/${start}/end/${end}/details`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWcombatwz(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/wz/start/0/end/0/details`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWcombatwzdate (gamertag, start = 0, end = 0, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/wz/start/${start}/end/${end}/details`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWfullcombatmp(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/mp/start/0/end/0`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWfullcombatmpdate (gamertag, start = 0, end = 0, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/mp/start/${start}/end/${end}`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWfullcombatwz(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/wz/start/0/end/0`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWfullcombatwzdate (gamertag, start = 0, end = 0, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`crm/cod/v2/title/mw/platform/${platform}/gamer/${gamertag}/matches/wz/start/${start}/end/${end}`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWmp(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform == \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`stats/cod/v1/title/mw/platform/${platform}/gamer/${gamertag}/profile/type/mp`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWwz(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform == \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`stats/cod/v1/title/mw/platform/${platform}/gamer/${gamertag}/profile/type/wz`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWBattleData(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            let brDetails = {};\r\n            this.MWmp(gamertag, platform).then((data) => {\r\n                let lifetime = data.lifetime;\r\n                if (typeof lifetime !== \"undefined\") {\r\n                    let filtered = Object.keys(lifetime.mode).filter(x => x.startsWith(\"br\")).reduce((obj, key) => {\r\n                        obj[key] = lifetime.mode[key];\r\n                        return obj;\r\n                    }, {});\r\n                    if (typeof filtered.br !== \"undefined\") {\r\n                        filtered.br.properties.title = \"br\";\r\n                        brDetails.br = filtered.br.properties;\r\n                    }\r\n                    if (typeof filtered.br_dmz !== \"undefined\") {\r\n                        filtered.br_dmz.properties.title = \"br_dmz\";\r\n                        brDetails.br_dmz = filtered.br_dmz.properties;\r\n                    }\r\n                    if (typeof filtered.br_all !== \"undefined\") {\r\n                        filtered.br_all.properties.title = \"br_all\";\r\n                        brDetails.br_all = filtered.br_all.properties;\r\n                    }\r\n                }\r\n                resolve(brDetails);\r\n            }).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWfriends(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\") reject(`Battlenet friends are not supported. Try a different platform.`);\r\n            if (platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            console.log(\"Will only work for the account you are logged in as\");\r\n            let urlInput = _helpers.buildUri(`stats/cod/v1/title/mw/platform/${platform}/gamer/${gamertag}/profile/friends/type/mp`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWstats(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`stats/cod/v1/title/mw/platform/${platform}/gamer/${gamertag}/profile/type/mp`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWwzstats(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform === \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`stats/cod/v1/title/mw/platform/${platform}/gamer/${gamertag}/profile/type/wz`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWweeklystats(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            weeklyStats = [];\r\n            weeklyStats.wz = {};\r\n            weeklyStats.mp = {};\r\n            this.MWstats(gamertag, platform).then((data) => {\r\n                if (typeof data.weekly !== \"undefined\") weeklyStats.mp = data.weekly;\r\n                this.MWwzstats(gamertag, platform).then((data) => {\r\n                    if (typeof data.weekly !== \"undefined\") weeklyStats.wz = data.weekly;\r\n                    resolve(weeklyStats);\r\n                }).catch(e => reject(e));\r\n            }).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWloot(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform == \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`loot/title/mw/platform/${platform}/gamer/${gamertag}/status/en`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWAnalysis(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"steam\") reject(\"Steam Doesn't exist for MW. Try `battle` instead.\");\r\n            if (platform === \"battle\" || platform == \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`ce/v2/title/mw/platform/${platform}/gametype/all/gamer/${gamertag}/summary/match_analysis/contentType/full/end/0/matchAnalysis/mobile/en`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    MWMapList(platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            let urlInput = _helpers.buildUri(`ce/v1/title/mw/platform/${platform}/gameType/mp/communityMapData/availability`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    friendFeed(gamertag, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"battle\" || platform == \"uno\") gamertag = _helpers.cleanClientName(gamertag);\r\n            let urlInput = _helpers.buildUri(`userfeed/v1/friendFeed/platform/${platform}/gamer/${gamertag}/friendFeedEvents/en`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    getEventFeed() {\r\n        return new Promise((resolve, reject) => {\r\n            let urlInput = _helpers.buildUri(`userfeed/v1/friendFeed/rendered/en/${ssoCookie}`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    getLoggedInIdentities() {\r\n        return new Promise((resolve, reject) => {\r\n            let urlInput = _helpers.buildUri(`crm/cod/v2/identities/${ssoCookie}`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    getLoggedInUserInfo() {\r\n        return new Promise((resolve, reject) => {\r\n            let urlInput = _helpers.buildProfileUri(`cod/userInfo/${ssoCookie}`);\r\n            _helpers.sendRequestUserInfoOnly(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    FuzzySearch(query, platform = defaultPlatform) {\r\n        return new Promise((resolve, reject) => {\r\n            if (platform === \"battle\" || platform == \"uno\" || platform == \"all\") query = _helpers.cleanClientName(query);\r\n            let urlInput = _helpers.buildUri(`crm/cod/v2/platform/${platform}/username/${query}/search`);\r\n            _helpers.sendRequest(urlInput).then(data => resolve(data)).catch(e => reject(e));\r\n        });\r\n    }\r\n}\r\n\r\nexport { api, platforms };"]},"metadata":{},"sourceType":"module"}